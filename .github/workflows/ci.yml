# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  INFERENCE_WORKER_REPOSITORY: inference_worker
  ML_SERVER_REPOSITORY: ml_server
  MLFLOW_SERVER_REPOSITORY: mlflow_server
  PIPELINE_WORKER_REPOSITORY: pipeline_worker

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: (INFERENCE_WORKER) Build, tag, and push image to Amazon ECR
        id: build-inference_worker
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ml_app/inference_worker
          docker build -t $ECR_REGISTRY/$INFERENCE_WORKER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$INFERENCE_WORKER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$INFERENCE_WORKER_REPOSITORY:$IMAGE_TAG"
          
      - name: (ML_SERVER) Build, tag, and push image to Amazon ECR
        id: build-ml-server
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ml_app/ml_server 
          docker build -t $ECR_REGISTRY/$ML_SERVER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ML_SERVER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ML_SERVER_REPOSITORY:$IMAGE_TAG"
      
      - name: (MLFLOW_SERVER) Build, tag, and push image to Amazon ECR
        id: build-mlflow-server
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ml_app/mlflow_server
          docker build -t $ECR_REGISTRY/$MLFLOW_SERVER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$MLFLOW_SERVER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$MLFLOW_SERVER_REPOSITORY:$IMAGE_TAG"
      
      - name: (PIPELINE_WORKER) Build, tag, and push image to Amazon ECR
        id: build-pipeline-worker
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ml_app/pipeline_worker
          docker build -t $ECR_REGISTRY/$PIPELINE_WORKER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$PIPELINE_WORKER_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$PIPELINE_WORKER_REPOSITORY:$IMAGE_TAG"
